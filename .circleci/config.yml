version: 2.1
executors:
  docker-node-image:
    docker:
      - image: circleci/node:13.8.0
  
  aws-cli-image:
    docker:
      - image: amazon/aws-cli
  
  alpine-image:
    docker:
      - image: alpine:latest

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
            # aws s3 rb "s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --force
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  prepare_aws_cli:
    description: aws cli 
    steps:
      - run:
          name: install dependency...'
          command: |
            sudo apt install -y tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install 
#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    executor: docker-node-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    executor: docker-node-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build front-end
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: frontend-build    
  test-frontend:
    executor: docker-node-image
    steps:
      -  checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build     
  test-backend:
    executor: docker-node-image
    steps:
      -  checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build                
  scan-frontend:
    executor: docker-node-image
    steps:
      - checkout
      - run: 
          name: scan frontend
          command: |
            cd frontend
            npm install 
            npm audit fix          
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    executor: docker-node-image
    steps:
      - checkout
      - run: 
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix           
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical            
  deploy-infrastructure:
    executor: aws-cli-image
    steps:
      - checkout
      - run:
          name: install tag and gzip
          command: |
             yum install -y tar gzip   
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Name="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags Name="frontend-infra-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt 
      - run:
          name: cat inventory file 
          command: 
               cat .circleci/ansible/inventory.txt      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment      
      # Here's where you will add some code to rollback on failu    
  configure-infrastructure:
    executor: alpine-image
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0b:ec:d5:64:2d:e0:3b:ba:21:80:19:83:bd:6b:41:d9"]      
      - attach_workspace:
         at: ~/
      - run:
          command: |
            apk add --update ansible tar gzip aws-cli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            echo 'installing dependency...'
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml               
      - destroy-environment
      # Here's where you will add some code to rollback on failure                          
  run-migrations:
    executor: docker-node-image
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - prepare_aws_cli
              
      - run:
          name: Run migrations
          command: |
           echo 'migrating db'
           cd backend
           npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl  -k https://kvdb.io/A5TFMALrhCcaW2aKmV7FtK/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
       # Here's where you will add some code to rollback on failure  
      # - destroy-environment 


  deploy-frontend:
    executor: docker-node-image
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - prepare_aws_cli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |  
            export backend_ip=$(cat .circleci/ansible/inventory.txt| head -2 | tail -1)
            echo $backend_ip
            export API_URL="http://${backend_ip}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${backend_ip}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure 
      - destroy_environment        
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]